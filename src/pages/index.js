import { useEffect, useState } from 'react'
import Head from 'next/head'
import JSZip from 'jszip'
import FileSaver from 'file-saver'
import styles from '../styles/Home.module.css'
import { IconList } from '../modules/IconList/IconList'
import { icons } from '../icons/icons'

const getColorScheme = () =>
	typeof window !== 'undefined' &&
	window.matchMedia('(prefers-color-scheme: dark)').matches
		? 'dark'
		: 'light'

export default function Home() {
	const [color, setColor] = useState(() => '#ffffff')
	const [strokeWidth, setStrokeWidth] = useState('2')
	const [size, setSize] = useState('24')
	const [files, setFiles] = useState([])

	const handleOnColorChange = event => {
		setColor(event.target.value)
	}

	const handleOnStrokeWidthChange = event => {
		setStrokeWidth(event.target.value)
	}

	const handleOnSizeChange = event => {
		setSize(event.target.value)
	}

	const handleOnDownload = () => {
		const zip = new JSZip()

		icons.forEach(file => {
			zip.file(`${file.name}.svg`, file.svg(color, strokeWidth, size))
		})

		zip.generateAsync({ type: 'blob' }).then(function (content) {
			FileSaver.saveAs(content, 'polkadot-icons.zip')
		})
	}

	useEffect(() => {
		// prevents hydration error when in light mode
		setColor(getColorScheme() === 'dark' ? '#ffffff' : '#000000')
	}, [])

	return (
		<div className={styles.container}>
			<Head>
				<title>Polkadot Icons</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={styles.main}>
				<header className={styles.header}>
					<label>
						<b>Stroke colour:</b> {color}
						<br />
						<input type="color" value={color} onChange={handleOnColorChange} />
					</label>

					<label>
						<b>Stroke width:</b> {strokeWidth}px
						<br />
						<input
							type="range"
							min="1"
							max="5"
							value={strokeWidth}
							onChange={handleOnStrokeWidthChange}
						/>
					</label>
					<label>
						<b>Size:</b> {size}x{size}px
						<br />
						<input
							type="range"
							min="12"
							max="48"
							step="6"
							value={size}
							onChange={handleOnSizeChange}
						/>
					</label>
				</header>

				<IconList {...{ color, size, strokeWidth }} />

				<button className={styles.buttonOutline} onClick={handleOnDownload}>
					Download all
				</button>
			</main>
		</div>
	)
}
